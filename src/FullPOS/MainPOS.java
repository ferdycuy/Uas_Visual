package FullPOS;

import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.print.PrinterException;
import java.sql.*;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.*;
import javax.print.attribute.*;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;


/*
 * @author Cyan Froste
 */
public class MainPOS extends javax.swing.JFrame {

    //Creates new form MainPOS
     
    public MainPOS() {
        initComponents();  
    }
    
    String lname;
    public MainPOS(String name) {
        initComponents();        
        this.lname = name;
        user.setText(lname); 
        CategoryTableUpdate();
        Category();
        CatalogTableUpdate();
        UserUpdate();
        
        TableStyleCenter(tableCategory, "Open Sans", 12);
        TableStyleCenter(tableSales, "Open Sans", 12);
        TableStyleCenter(tableCatalog, "Open Sans", 12);
        TableStyleCenter(tableUsers, "Open Sans", 12);
        
        TextFieldStyler(txtProduct);
        TextFieldStyler(txtCode);
        TextFieldStyler(txtMRP);
        TextFieldStyler(txtCP);
        TextFieldStyler(txtLineTotal);
        TextFieldStyler(txtTotal);
        TextFieldStyler(txtPay);
        TextFieldStyler(txtBalance);
        TextFieldStyler(txtDiscount);
        TextFieldStyler(txtQty);
        TextFieldStyler(txtTax);
        TextFieldStyler(txtProductSales);
        TextFieldStyler(txtCodeSales);
        TextFieldStyler(txtMRPSales);
        TextFieldStyler(txtCatName);
        TextFieldStyler(txtUsername);
        TextFieldStyler(txtPassword);        
        
        JSpinner.NumberEditor edit = (JSpinner.NumberEditor)spinQty.getEditor();
        edit.getTextField().setHorizontalAlignment(JTextField.CENTER);
        
        ((JLabel)catStatus.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        ((JLabel)logCategory.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        ((JLabel)logStatus.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        ((JLabel)userStatus.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        ((JLabel)userType.getRenderer()).setHorizontalAlignment(JLabel.CENTER);
        
        
    }
    
    private static final String URL = "jdbc:mysql://localhost:3306/pos?useLegacyDatetimeCode=false&serverTimezone=UTC"; 
    private static final String USER = "root";
    private static final String PASS = "";    
    Connection con = null;
    PreparedStatement pstmt  = null;
    ResultSet rs = null;
    ResultSetMetaData rsmd  = null;   
    
    private class CategoryItem{
        int id;
        String name;
        public CategoryItem(int id, String name){
            this.id = id;
            this.name = name;
        }        
        @Override
        public String toString(){
            return name;
        }
        public int toInt(){
            return id;
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtCodeSales = new javax.swing.JTextField();
        txtProductSales = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtMRPSales = new javax.swing.JTextField();
        txtLineTotal = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        MRPSales = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        spinQty = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableSales = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        txtTotal = new javax.swing.JTextField();
        txtPay = new javax.swing.JTextField();
        txtBalance = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        invoiceButton = new javax.swing.JButton();
        txtDiscount = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        user = new javax.swing.JLabel();
        exitSales = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        labelCatalog = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableCatalog = new javax.swing.JTable();
        txtProduct = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        logCategory = new javax.swing.JComboBox();
        logStatus = new javax.swing.JComboBox<>();
        txtQty = new javax.swing.JTextField();
        txtMRP = new javax.swing.JTextField();
        txtCP = new javax.swing.JTextField();
        txtCode = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtTax = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        addButtonCatalog = new javax.swing.JButton();
        editButtonCatalog = new javax.swing.JButton();
        deleteButtonCatalog = new javax.swing.JButton();
        exitCatalog = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        labelCategoryList = new javax.swing.JLabel();
        labelCategoryName = new javax.swing.JLabel();
        txtCatName = new javax.swing.JTextField();
        labelCategoryStatus = new javax.swing.JLabel();
        catStatus = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCategory = new javax.swing.JTable();
        deleteButtonCat = new javax.swing.JButton();
        addButtonCat = new javax.swing.JButton();
        editButtonCat = new javax.swing.JButton();
        exitCategory = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableUsers = new javax.swing.JTable();
        userStatus = new javax.swing.JComboBox<>();
        jLabel23 = new javax.swing.JLabel();
        addButtonUser = new javax.swing.JButton();
        editButtonUser = new javax.swing.JButton();
        deleteButtonUser = new javax.swing.JButton();
        exitUser = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        userType = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        printSR = new javax.swing.JButton();
        printIndPS = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtReport = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Point of Sale");
        setBackground(new java.awt.Color(255, 255, 255));
        setUndecorated(true);
        setOpacity(0.96F);
        setResizable(false);

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jTabbedPane1.setFont(new java.awt.Font("Open Sans", 1, 12)); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel1.setPreferredSize(new java.awt.Dimension(1300, 600));

        jLabel8.setFont(new java.awt.Font("Open Sans Extrabold", 0, 24)); // NOI18N
        jLabel8.setText("SALES");

        txtCodeSales.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtCodeSales.setForeground(new java.awt.Color(51, 51, 51));
        txtCodeSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodeSalesActionPerformed(evt);
            }
        });
        txtCodeSales.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodeSalesKeyPressed(evt);
            }
        });

        txtProductSales.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtProductSales.setForeground(new java.awt.Color(51, 51, 51));
        txtProductSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductSalesActionPerformed(evt);
            }
        });
        txtProductSales.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtProductSalesKeyPressed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel11.setText("Code :");

        txtMRPSales.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtMRPSales.setForeground(new java.awt.Color(51, 51, 51));
        txtMRPSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMRPSalesActionPerformed(evt);
            }
        });

        txtLineTotal.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtLineTotal.setForeground(new java.awt.Color(51, 51, 51));
        txtLineTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLineTotalActionPerformed(evt);
            }
        });
        txtLineTotal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLineTotalKeyPressed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel12.setText("Product :");

        MRPSales.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        MRPSales.setText("MRP :");

        jLabel15.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel15.setText("Line Total :");

        spinQty.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        spinQty.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        spinQty.setEditor(new javax.swing.JSpinner.NumberEditor(spinQty, ""));
        spinQty.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinQtyStateChanged(evt);
            }
        });
        spinQty.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                spinQtyPropertyChange(evt);
            }
        });
        spinQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spinQtyKeyPressed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel16.setText("Qty :");

        tableSales.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        tableSales.setForeground(new java.awt.Color(51, 51, 51));
        tableSales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Code", "Product Name", "MRP", "Qty.", "Line Total", "Discount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSales.setShowHorizontalLines(false);
        tableSales.setShowVerticalLines(false);
        tableSales.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableSalesKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(tableSales);

        addButton.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        addButton.setText("ADD/update");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        removeButton.setText("REMOVE");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        txtTotal.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtTotal.setForeground(new java.awt.Color(51, 51, 51));

        txtPay.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtPay.setForeground(new java.awt.Color(51, 51, 51));
        txtPay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPayKeyPressed(evt);
            }
        });

        txtBalance.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtBalance.setForeground(new java.awt.Color(51, 51, 51));

        jLabel14.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel14.setText("Total :");

        jLabel17.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel17.setText("Pay :");

        jLabel18.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel18.setText("Balance :");

        invoiceButton.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        invoiceButton.setText("INVOICE");
        invoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceButtonActionPerformed(evt);
            }
        });

        txtDiscount.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtDiscount.setForeground(new java.awt.Color(51, 51, 51));
        txtDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiscountActionPerformed(evt);
            }
        });
        txtDiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDiscountKeyPressed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel19.setText("Discount :");

        jButton1.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        jButton1.setText("RESET");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        user.setFont(new java.awt.Font("Open Sans", 2, 14)); // NOI18N
        user.setForeground(new java.awt.Color(0, 204, 154));
        user.setText("user");
        user.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        user.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userMouseClicked(evt);
            }
        });

        exitSales.setFont(new java.awt.Font("Open Sans", 2, 14)); // NOI18N
        exitSales.setForeground(new java.awt.Color(255, 51, 0));
        exitSales.setText("exit");
        exitSales.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitSales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitSalesMouseClicked(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Open Sans Semibold", 1, 24)); // NOI18N
        jLabel24.setText("%");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(user)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitSales))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCodeSales, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtProductSales, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMRPSales, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MRPSales))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spinQty, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16))
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel24))
                                    .addComponent(jLabel19))
                                .addGap(19, 19, 19)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtLineTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15))))
                        .addGap(69, 69, 69)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtBalance)
                            .addComponent(txtTotal)
                            .addComponent(txtPay)
                            .addComponent(jLabel14)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(invoiceButton, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))))
                .addGap(134, 134, 134))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(user)
                    .addComponent(exitSales))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel12)))
                                    .addComponent(MRPSales, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtCodeSales, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtProductSales, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMRPSales, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtLineTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(spinQty, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(50, 50, 50)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPay, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addComponent(jLabel18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(50, 50, 50)
                                        .addComponent(invoiceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(removeButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton1))))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(jLabel19)))
                .addContainerGap(92, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sell", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        labelCatalog.setFont(new java.awt.Font("Open Sans Extrabold", 0, 24)); // NOI18N
        labelCatalog.setText("CATALOG");

        jLabel1.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel1.setText("Product :");

        jLabel3.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel3.setText("Description :");

        jLabel4.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel4.setText("Category :");

        jLabel5.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel5.setText("MRP :");

        jLabel6.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel6.setText("Cost Price :");

        jLabel7.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel7.setText("Quantity :");

        jLabel9.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel9.setText("Status :");

        tableCatalog.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        tableCatalog.setForeground(new java.awt.Color(51, 51, 51));
        tableCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product", "Description", "Category", "MRP", "Tax", "Cost Price", "Quantity", "Status", "Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCatalog.setShowHorizontalLines(false);
        tableCatalog.setShowVerticalLines(false);
        tableCatalog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCatalogMouseClicked(evt);
            }
        });
        tableCatalog.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableCatalogKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tableCatalog);

        txtProduct.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtProduct.setForeground(new java.awt.Color(51, 51, 51));
        txtProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductActionPerformed(evt);
            }
        });
        txtProduct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtProductKeyReleased(evt);
            }
        });

        txtDescription.setColumns(20);
        txtDescription.setForeground(new java.awt.Color(51, 51, 51));
        txtDescription.setRows(5);
        jScrollPane3.setViewportView(txtDescription);

        logCategory.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        logCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logCategoryActionPerformed(evt);
            }
        });

        logStatus.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        logStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Offline" }));
        logStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logStatusActionPerformed(evt);
            }
        });

        txtQty.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtQty.setForeground(new java.awt.Color(51, 51, 51));
        txtQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQtyActionPerformed(evt);
            }
        });

        txtMRP.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtMRP.setForeground(new java.awt.Color(51, 51, 51));

        txtCP.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtCP.setForeground(new java.awt.Color(51, 51, 51));

        txtCode.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtCode.setForeground(new java.awt.Color(51, 51, 51));

        jLabel10.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel10.setText("Code :");

        txtTax.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtTax.setForeground(new java.awt.Color(51, 51, 51));

        jLabel2.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel2.setText("Tax :");

        addButtonCatalog.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        addButtonCatalog.setText("ADD");
        addButtonCatalog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonCatalogActionPerformed(evt);
            }
        });

        editButtonCatalog.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        editButtonCatalog.setText("EDIT");
        editButtonCatalog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonCatalogActionPerformed(evt);
            }
        });

        deleteButtonCatalog.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        deleteButtonCatalog.setText("DELETE");
        deleteButtonCatalog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonCatalogActionPerformed(evt);
            }
        });

        exitCatalog.setFont(new java.awt.Font("Open Sans", 2, 14)); // NOI18N
        exitCatalog.setForeground(new java.awt.Color(255, 51, 0));
        exitCatalog.setText("exit");
        exitCatalog.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitCatalog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitCatalogMouseClicked(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Open Sans Semibold", 1, 24)); // NOI18N
        jLabel25.setText("%");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(87, 87, 87)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel2)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(labelCatalog))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtMRP)
                                            .addComponent(logCategory, 0, 124, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                .addComponent(txtTax)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel25)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel10))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtCP)
                                            .addComponent(logStatus, 0, 124, Short.MAX_VALUE)
                                            .addComponent(txtCode, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(118, 118, 118)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(addButtonCatalog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(deleteButtonCatalog, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                            .addComponent(editButtonCatalog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(exitCatalog))))
                            .addComponent(jScrollPane2))
                        .addGap(120, 120, 120))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCatalog)
                    .addComponent(exitCatalog))
                .addGap(50, 50, 50)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(txtMRP, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtCP, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButtonCatalog, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(logCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(logStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editButtonCatalog, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10)
                                    .addComponent(txtTax, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(deleteButtonCatalog, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Catalog", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        labelCategoryList.setFont(new java.awt.Font("Open Sans Extrabold", 0, 24)); // NOI18N
        labelCategoryList.setText("CATEGORY");

        labelCategoryName.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        labelCategoryName.setText("Category Name :");

        txtCatName.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtCatName.setForeground(new java.awt.Color(51, 51, 51));
        txtCatName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCatNameKeyPressed(evt);
            }
        });

        labelCategoryStatus.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        labelCategoryStatus.setText("Status :");

        catStatus.setBackground(new java.awt.Color(51, 51, 51));
        catStatus.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        catStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Offline" }));

        jScrollPane1.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N

        tableCategory.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        tableCategory.setForeground(new java.awt.Color(51, 51, 51));
        tableCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCategory.setShowHorizontalLines(false);
        tableCategory.setShowVerticalLines(false);
        tableCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCategoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableCategory);
        tableCategory.getAccessibleContext().setAccessibleDescription("");

        deleteButtonCat.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        deleteButtonCat.setText("DELETE");
        deleteButtonCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonCatActionPerformed(evt);
            }
        });

        addButtonCat.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        addButtonCat.setText("ADD");
        addButtonCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonCatActionPerformed(evt);
            }
        });

        editButtonCat.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        editButtonCat.setText("EDIT");
        editButtonCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonCatActionPerformed(evt);
            }
        });

        exitCategory.setFont(new java.awt.Font("Open Sans", 2, 14)); // NOI18N
        exitCategory.setForeground(new java.awt.Color(255, 51, 0));
        exitCategory.setText("exit");
        exitCategory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitCategoryMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(labelCategoryList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitCategory))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelCategoryName)
                                    .addComponent(labelCategoryStatus))
                                .addGap(52, 52, 52)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtCatName)
                                    .addComponent(catStatus, 0, 186, Short.MAX_VALUE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(addButtonCat, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)
                                .addComponent(editButtonCat, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                                .addComponent(deleteButtonCat, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(92, 92, 92)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(exitCategory)
                    .addComponent(labelCategoryList))
                .addGap(77, 77, 77)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCategoryName)
                            .addComponent(txtCatName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(77, 77, 77)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCategoryStatus)
                            .addComponent(catStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteButtonCat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addButtonCat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editButtonCat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(132, 132, 132))
        );

        jTabbedPane1.addTab("Category", jPanel3);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel20.setFont(new java.awt.Font("Open Sans Extrabold", 0, 24)); // NOI18N
        jLabel20.setText("USER");

        jLabel21.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel21.setText("Username :");

        jLabel22.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel22.setText("Password :");

        txtUsername.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtUsername.setForeground(new java.awt.Color(51, 51, 51));

        txtPassword.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        txtPassword.setForeground(new java.awt.Color(51, 51, 51));
        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPasswordKeyPressed(evt);
            }
        });

        tableUsers.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        tableUsers.setForeground(new java.awt.Color(51, 51, 51));
        tableUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Username", "Status", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableUsers.setShowHorizontalLines(false);
        tableUsers.setShowVerticalLines(false);
        tableUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableUsersMouseClicked(evt);
            }
        });
        tableUsers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableUsersKeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(tableUsers);

        userStatus.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        userStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Offline" }));
        userStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userStatusActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel23.setText("Status :");

        addButtonUser.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        addButtonUser.setText("ADD");
        addButtonUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonUserActionPerformed(evt);
            }
        });

        editButtonUser.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        editButtonUser.setText("EDIT");
        editButtonUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonUserActionPerformed(evt);
            }
        });

        deleteButtonUser.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        deleteButtonUser.setText("DELETE");
        deleteButtonUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonUserActionPerformed(evt);
            }
        });

        exitUser.setFont(new java.awt.Font("Open Sans", 2, 14)); // NOI18N
        exitUser.setForeground(new java.awt.Color(255, 51, 0));
        exitUser.setText("exit");
        exitUser.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitUserMouseClicked(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jLabel26.setText("Type :");

        userType.setFont(new java.awt.Font("Open Sans", 0, 12)); // NOI18N
        userType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "admin", "manager", "user" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitUser))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(addButtonUser, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addComponent(editButtonUser, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                                        .addComponent(deleteButtonUser, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(75, 75, 75)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                                            .addComponent(txtPassword)))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addGap(125, 125, 125)
                                .addComponent(userStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel26)
                            .addComponent(userType, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(84, 84, 84))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel20)
                            .addComponent(exitUser))
                        .addGap(77, 77, 77)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26)
                            .addComponent(userType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(userStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23))
                        .addGap(61, 61, 61)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                            .addComponent(addButtonUser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editButtonUser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteButtonUser, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(132, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("User", jPanel4);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        printSR.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        printSR.setText("PRINT SALES REPORT");
        printSR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printSRActionPerformed(evt);
            }
        });

        printIndPS.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        printIndPS.setText("PRINT INDIVIDUAL PRODUCT SALES REPORT");
        printIndPS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printIndPSActionPerformed(evt);
            }
        });

        txtReport.setColumns(20);
        txtReport.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtReport.setRows(5);
        jScrollPane6.setViewportView(txtReport);

        jLabel13.setFont(new java.awt.Font("Open Sans", 2, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 51, 0));
        jLabel13.setText("exit");
        jLabel13.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Open Sans", 0, 14)); // NOI18N
        jButton2.setText("PRINT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1051, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(printSR, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(printIndPS, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13))))
                .addContainerGap(120, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(printSR, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(printIndPS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Others", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1300, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void TextFieldStyler(JTextField textField){
        textField.setHorizontalAlignment(JTextField.CENTER);
    }  
    
    private void TableStyleCenter(JTable table, String fontName, int fontSize){        
        table.getTableHeader().setFont( new Font( fontName , Font.PLAIN, fontSize )); // Setting  Table Header Font, Cell Alignment and header alignment        
        DefaultTableCellRenderer center = new DefaultTableCellRenderer();        
        center.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);        
        int cc = table.getModel().getColumnCount();
        for(int i=0; i<cc; i++){
            table.getColumnModel().getColumn(i).setCellRenderer(center);
        }
        DefaultTableCellRenderer renderer = (DefaultTableCellRenderer)table.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(JLabel.CENTER);
    }
    
    private void editButtonCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonCatActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tableCategory.getModel();
        int SelectIndex = tableCategory.getSelectedRow();        
        int CID = Integer.parseInt(model.getValueAt(SelectIndex, 0).toString());
        String CName = txtCatName.getText();
        String Status = catStatus.getSelectedItem().toString();        
        try{
            con = DriverManager.getConnection(URL,USER,PASS);
            String sql = "UPDATE category SET catname=?, status=? WHERE CID=?";
            pstmt = con.prepareStatement(sql);
            pstmt.setString(1, CName);
            pstmt.setString(2, Status);
            pstmt.setInt(3, CID);
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Entry Updated");
            CategoryTableUpdate();
            CatalogTableUpdate();
            txtCatName.setText("");
            catStatus.setSelectedIndex(-1);
            txtCatName.requestFocus();
            Category();            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        }          
    }//GEN-LAST:event_editButtonCatActionPerformed
    
    @SuppressWarnings("unchecked")
    private void Category(){        
        try{            
            con = DriverManager.getConnection(URL,USER,PASS);
            String sql = "SELECT * FROM category";
            pstmt = con.prepareStatement(sql);
            rs = pstmt.executeQuery();            
            logCategory.removeAllItems();          
             while(rs.next()){
                int ID = rs.getInt(1);
                String name = rs.getString(2);
                CategoryItem L = new CategoryItem(ID, name);
                logCategory.addItem(new CategoryItem(ID, name ));
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        }            
    }    
    
    private void CategoryTableUpdate(){
        try{
            int ColumnCount;
            con = DriverManager.getConnection(URL,USER,PASS);
            String sql = "SELECT * FROM category";
            pstmt = con.prepareStatement(sql);
            rs = pstmt.executeQuery();
            rsmd = rs.getMetaData();            
            ColumnCount = rsmd.getColumnCount();            
            DefaultTableModel model = (DefaultTableModel)tableCategory.getModel();
            model.setRowCount(0);            
            while(rs.next()){                
                String CID = rs.getString("CID");
                String Catname = rs.getString("catname");
                String Status = rs.getString("status");                
                 model.addRow(new Object[]{
                    CID,
                    Catname,
                    Status                        
                } );
            }            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        }    
    }
    
    private void CatalogTableUpdate(){
        try{
            int ColumnCount;
            con = DriverManager.getConnection(URL,USER,PASS);
            String sql = "SELECT P.PID, P.prodname,P.description, C.catname, P.MRP, P.costprice,P.qty, P.tax, P.prodstatus, P.prodcode FROM catalogtable P, category C where P.PCID = C.CID";
            pstmt = con.prepareStatement(sql);
            rs = pstmt.executeQuery();
            rsmd = rs.getMetaData();            
            ColumnCount = rsmd.getColumnCount();            
            DefaultTableModel model = (DefaultTableModel)tableCatalog.getModel();
            model.setRowCount(0);            
            while(rs.next()){
                model.addRow(new Object[]{
                    rs.getString("PID"),
                    rs.getString("prodname"),
                    rs.getString("description"),
                    rs.getString("catname"),
                    rs.getString("MRP"),
                    rs.getString("tax"),
                    rs.getString("costprice"),
                    rs.getString("qty"),
                    rs.getString("prodstatus"),
                    rs.getString("prodcode")
                } );
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        }    
    }
    
    private void addButtonCatActionPerformed(){
        String Name = txtCatName.getText();
        String Status = catStatus.getSelectedItem().toString();        
        try{
            con = DriverManager.getConnection(URL,USER,PASS);
            String sql = "INSERT INTO category(catname,status) VALUES (?,?)";
            pstmt = con.prepareStatement(sql);
            pstmt.setString(1, Name);
            pstmt.setString(2, Status);
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Entry Added");
            CategoryTableUpdate();
            CatalogTableUpdate();
            txtCatName.setText("");
            catStatus.setSelectedIndex(-1);
            Category();
            txtCatName.requestFocus();            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        }    
    }
    
    private void addButtonCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonCatActionPerformed
        addButtonCatActionPerformed();
    }//GEN-LAST:event_addButtonCatActionPerformed

    private void tableCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCategoryMouseClicked
        DefaultTableModel model = (DefaultTableModel)tableCategory.getModel();
        int SelectIndex = tableCategory.getSelectedRow();
        txtCatName.setText(model.getValueAt(SelectIndex, 1).toString());
        catStatus.setSelectedItem(model.getValueAt(SelectIndex, 2).toString());
    }//GEN-LAST:event_tableCategoryMouseClicked
    
    private void deleteButtonCatActionPerformed(){
        DefaultTableModel model = (DefaultTableModel)tableCategory.getModel();
        int SelectIndex = tableCategory.getSelectedRow();        
        int CID = Integer.parseInt(model.getValueAt(SelectIndex, 0).toString());        
        int Choice = JOptionPane.showConfirmDialog(this, "Delete?","Warning", JOptionPane.YES_NO_OPTION);        
        if(Choice == JOptionPane.YES_OPTION){
            try{
                con = DriverManager.getConnection(URL,USER,PASS);
                String sql = "DELETE FROM category WHERE CID = ?";
                pstmt = con.prepareStatement(sql);
                pstmt.setInt(1, CID);
                pstmt.executeUpdate();
                sql = "DELETE FROM catalogtable WHERE PCID = ?";
                pstmt = con.prepareStatement(sql);
                pstmt.setInt(1, CID);
                pstmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Entry Deleted");
                CategoryTableUpdate();
                CatalogTableUpdate();
                txtCatName.setText("");
                catStatus.setSelectedIndex(-1);
                Category();
                txtCatName.requestFocus();                
            }catch(SQLException e){
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        }    
        }        
    }
    
    private void deleteButtonCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonCatActionPerformed
        // TODO add your handling code here:
        deleteButtonCatActionPerformed();        
    }//GEN-LAST:event_deleteButtonCatActionPerformed

    private void txtQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQtyActionPerformed

    private void logStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_logStatusActionPerformed

    private void logCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_logCategoryActionPerformed

    private void txtProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductActionPerformed
    
    private void ClearCatalog(){
        txtProduct.setText("");
        logStatus.setSelectedIndex(-1);
        txtDescription.setText("");
        txtMRP.setText("");
        txtTax.setText("");
        txtCP.setText("");
        txtQty.setText("");
        txtCode.setText("");
        logCategory.setSelectedIndex(-1);
        CatalogTableUpdate();            
        txtProduct.requestFocus();
    }
    
    private void addButtonCatalogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonCatalogActionPerformed
        String Name = txtProduct.getText();
        String Description = txtDescription.getText();
        CategoryItem item = (CategoryItem)logCategory.getSelectedItem();
        String MRP = txtMRP.getText();
        String CPrice = txtCP.getText();
        String Qty = txtQty.getText();
        String PCode = txtCode.getText();
        String Status = logStatus.getSelectedItem().toString();
        String Tax = txtTax.getText();
        if (Tax.equals(""))
                Tax = "0";
        try{
            con = DriverManager.getConnection(URL,USER,PASS);
            String sql = "INSERT INTO catalogtable(prodname, description, PCID, MRP, costprice, qty, prodstatus, prodcode, tax) VALUES (?,?,?,?,?,?,?,?,?)";
            pstmt = con.prepareStatement(sql);            
            pstmt.setString(1, Name);
            pstmt.setString(2, Description);
            pstmt.setInt(3, item.id);
            pstmt.setString(4, MRP);
            pstmt.setString(5, CPrice);
            pstmt.setString(6, Qty);
            pstmt.setString(7, Status);
            pstmt.setString(8, PCode);
            pstmt.setString(9, Tax);
            
            pstmt.executeUpdate();            
            JOptionPane.showMessageDialog(this, "Product Added");
            ClearCatalog();            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        }    
    }//GEN-LAST:event_addButtonCatalogActionPerformed

    private void editButtonCatalogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonCatalogActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tableCatalog.getModel();
        int SelectIndex = tableCatalog.getSelectedRow();
        int PID = Integer.parseInt(model.getValueAt(SelectIndex, 0).toString());        
        String Name = txtProduct.getText();
        String Description = txtDescription.getText();        
        CategoryItem item = (CategoryItem)logCategory.getSelectedItem();        
        String MRP = txtMRP.getText();
        String Tax = txtTax.getText();
        if (Tax.equals(""))
                Tax = "0";
        String CPrice = txtCP.getText();
        String Qty = txtQty.getText();
        String PCode = txtCode.getText();
        String Status = logStatus.getSelectedItem().toString();        
        try{
            con = DriverManager.getConnection(URL,USER,PASS);
            String sql = "UPDATE catalogtable SET prodname=?, description=?, PCID=?, MRP=?, tax=?, costprice=?, qty=?, prodstatus=?, prodcode=? WHERE PID=?";
            pstmt = con.prepareStatement(sql);            
            pstmt.setString(1, Name);
            pstmt.setString(2, Description);
            pstmt.setInt(3, item.id);
            pstmt.setString(4, MRP);
            pstmt.setString(5, Tax);            
            pstmt.setString(6, CPrice);
            pstmt.setString(7, Qty);
            pstmt.setString(8, Status);
            pstmt.setString(9, PCode);
            pstmt.setInt(10, PID);            
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Product Updated");
            ClearCatalog();            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        }    
    }//GEN-LAST:event_editButtonCatalogActionPerformed

    private void tableCatalogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCatalogMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tableCatalog.getModel();
        int SelectIndex = tableCatalog.getSelectedRow();        
        txtProduct.setText(model.getValueAt(SelectIndex, 1).toString());
        txtDescription.setText(model.getValueAt(SelectIndex, 2).toString());        
        String SelCat = model.getValueAt(SelectIndex, 3).toString();                
        int ID = 0;               
        try{            
            con = DriverManager.getConnection(URL,USER,PASS);
            String sql = "SELECT * FROM category";
            pstmt = con.prepareStatement(sql);
            rs = pstmt.executeQuery();            
            while(rs.next()){
                if(SelCat.equals(rs.getString(2))){
                     SelCat = rs.getString(2);
                     ID = rs.getInt(1);
                }
            }
            logCategory.getModel().setSelectedItem(new CategoryItem(ID, SelCat));           
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        }             
        logStatus.getModel().setSelectedItem(model.getValueAt(SelectIndex, 8).toString());        
        txtMRP.setText(model.getValueAt(SelectIndex, 4).toString());
        txtTax.setText(model.getValueAt(SelectIndex, 5).toString());
        txtCP.setText(model.getValueAt(SelectIndex, 6).toString());
        txtQty.setText(model.getValueAt(SelectIndex, 7).toString());        
        txtCode.setText(model.getValueAt(SelectIndex, 9).toString());        
    }//GEN-LAST:event_tableCatalogMouseClicked
    
    private void deleteButtonCatalogActionPerformed(){
        DefaultTableModel model = (DefaultTableModel)tableCatalog.getModel();
        int SelectIndex = tableCatalog.getSelectedRow();        
        int PID = Integer.parseInt(model.getValueAt(SelectIndex, 0).toString());        
        int Choice = JOptionPane.showConfirmDialog(this, "Delete?","Warning", JOptionPane.YES_NO_OPTION);        
        if(Choice == JOptionPane.YES_OPTION){
            try{
                con = DriverManager.getConnection(URL,USER,PASS);
                String sql = "DELETE FROM catalogtable WHERE PID=?";
                pstmt = con.prepareStatement(sql);
                pstmt.setInt(1, PID);
                pstmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Product Deleted");
                ClearCatalog();                
            }catch(SQLException e){
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }finally {
                try {
                    if (con != null) {
                        con.close();
                    }
                    if (pstmt != null) {
                        pstmt.close();
                    }if (rs != null) {
                    rs.close();
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
                }
            }    
        }
    }    
    
    private void deleteButtonCatalogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonCatalogActionPerformed
        // TODO add your handling code here:
        deleteButtonCatalogActionPerformed();        
    }//GEN-LAST:event_deleteButtonCatalogActionPerformed

    private void txtCodeSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodeSalesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodeSalesActionPerformed

    private void txtLineTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLineTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLineTotalActionPerformed
    
    private void ClearSales(){
        txtCodeSales.setText("");
        txtProductSales.setText("");
        txtMRPSales.setText("");
        txtLineTotal.setText("");
        txtDiscount.setText("");        
        spinQty.setModel(new SpinnerNumberModel(0, 0, null, 1));
        spinQty.setEditor(new JSpinner.NumberEditor(spinQty, ""));
    }
    
    private void ClearSalesAll(){
        ClearSales();
        txtTotal.setText("");
        txtBalance.setText("");
        txtPay.setText("");        
        DefaultTableModel model = (DefaultTableModel)tableSales.getModel();
        model.setRowCount(0);
    }
   
    private void addButtonActionPerformed(){
        
        if(txtProductSales.getText().equals("") || txtLineTotal.getText().equals("")){
            ClearSales();
        }else{ 
            String PName = txtProductSales.getText();  
            DefaultTableModel model = (DefaultTableModel)tableSales.getModel();
            int rowCount = model.getRowCount();
            
            if(rowCount == 0){
                model.addRow(new Object[]{
                txtCodeSales.getText(),
                txtProductSales.getText(),
                txtMRPSales.getText(),

                spinQty.getValue().toString(),
                txtLineTotal.getText(),
                txtDiscount.getText()
                } );
            }else{
            for(int i=0; i<rowCount; i++){
                    if(model.getValueAt(i, 1).toString().equalsIgnoreCase(PName)){                        
                        model.removeRow(i);
                        break;                        
                    }                    
                }
                model.addRow(new Object[]{
                txtCodeSales.getText(),
                txtProductSales.getText(),
                txtMRPSales.getText(),

                spinQty.getValue().toString(),
                txtLineTotal.getText(),
                txtDiscount.getText()
                } );
            }
        }     
        float sum = 0;
        for (int i=0; i<tableSales.getRowCount(); i++){
            sum = sum + Float.parseFloat(tableSales.getValueAt(i, 4).toString());
        }
        txtTotal.setText(Float.toString(sum));
        ClearSales();
        txtCodeSales.requestFocus();
    }
    
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        addButtonActionPerformed();        
    }//GEN-LAST:event_addButtonActionPerformed
    int AvailableQty;
    private void txtCodeSalesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodeSalesKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String PCode = txtCodeSales.getText();
            try{
                con = DriverManager.getConnection(URL, USER, PASS);
                String sql = "SELECT * FROM catalogtable WHERE prodcode = ?";
                pstmt = con.prepareStatement(sql);
                pstmt.setString(1, PCode);
                rs = pstmt.executeQuery();
                if (rs.next()==false){
                    JOptionPane.showMessageDialog(this, "Product Not Found");
                }else{
                    String Product = rs.getString("prodname");
                    String MRP = rs.getString("MRP");
                    txtProductSales.setText(Product.trim());
                    txtMRPSales.setText(MRP.trim()); 
                    AvailableQty = rs.getInt("qty");
                }
            }
            catch(SQLException e){
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }finally {
                try {
                    if (con != null) {
                        con.close();
                    }
                    if (pstmt != null) {
                        pstmt.close();
                    }if (rs != null) {
                    rs.close();
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
                }
            }   
        }
    }//GEN-LAST:event_txtCodeSalesKeyPressed
    
    private void qtyChanged(){
       String PName = txtProductSales.getText();        
        int Quantity =  Integer.parseInt(spinQty.getValue().toString());
        float MRP = Float.parseFloat(txtMRPSales.getText());                
        if(!"".equals(txtDiscount.getText())){
            int Discount = Integer.parseInt(txtDiscount.getText());
            MRP = MRP - (Discount*MRP)/100;            
            MRPSales.setText("Price");
        } 
        if(Quantity > AvailableQty){
            JOptionPane.showMessageDialog(this, "Exceeds Available Quantity in the Inventory");
            // spinQty.setModel(new SpinnerNumberModel(null, 0, null, 1));                    
            spinQty.setValue(AvailableQty);
            // spinQty.setEditor(new JSpinner.NumberEditor(spinQty, String.valueOf(AvailableQty)));
        }
        else{                        
            DecimalFormat Formatter = new DecimalFormat("##.00");  // Decimal Formatter
            String LineTotal = Formatter.format(Quantity * MRP); 
            txtLineTotal.setText(String.valueOf(LineTotal));
            
        }
        txtLineTotal.requestFocus();
    }
    
    private void spinQtyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinQtyStateChanged
        // TODO add your handling code here:
        qtyChanged();   
    }//GEN-LAST:event_spinQtyStateChanged
    
    private void saleUpdate(){
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");  
        LocalDateTime now = LocalDateTime.now();
        String Date = dtf.format(now);
        String Total = txtTotal.getText();
        String Pay = txtPay.getText();
        String Balance = txtBalance.getText();
        String User = user.getText();        
        int LastInsertedID = 0;        
        try{
            con = DriverManager.getConnection(URL,USER,PASS);
            String sql = "INSERT INTO salestable(date, total, paid, balance, user) VALUES (?,?,?,?,?)";
            pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            pstmt.setString(1, Date);
            pstmt.setString(2, Total);
            pstmt.setString(3, Pay);
            pstmt.setString(4, Balance);
            pstmt.setString(5, User);
            pstmt.executeUpdate();
            ResultSet rsGetKey  = pstmt.getGeneratedKeys();            
            if(rsGetKey.next()){
                LastInsertedID = rsGetKey.getInt(1);
            }            
            sql = "INSERT INTO productsold(SID, prodcode, MRP, total, qty, discount) VALUES (?,?,?,?,?,?)";
            pstmt = con.prepareStatement(sql);
            for(int i=0; i<tableSales.getRowCount(); i++){
                String ProdCode = tableSales.getValueAt(i, 0).toString();
                String MRP = tableSales.getValueAt(i, 2).toString();
                String total = tableSales.getValueAt(i, 4).toString();
                String Qty = tableSales.getValueAt(i, 3).toString();
                String Discount = tableSales.getValueAt(i, 5).toString();                
                pstmt.setString(2, ProdCode);
                pstmt.setString(3, MRP);
                pstmt.setString(4, total);
                pstmt.setString(5, Qty);
                pstmt.setString(6, Discount);
                pstmt.setInt(1, LastInsertedID);
                pstmt.executeUpdate();
            }            
            pstmt.addBatch();            
            sql = "UPDATE catalogtable SET qty = qty - ? WHERE prodcode = ?";
            pstmt = con.prepareStatement(sql);
            for(int i=0; i<tableSales.getRowCount(); i++){
                String ProdCode = tableSales.getValueAt(i, 0).toString();
                String Qty = tableSales.getValueAt(i, 3).toString();                
                pstmt.setString(2, ProdCode);                             
                pstmt.setString(1, Qty);               
                pstmt.executeUpdate();
            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                    rs.close();
                    }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        }    
    }    
    
    private void txtDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiscountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDiscountActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ClearSalesAll();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtLineTotalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLineTotalKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            addButtonActionPerformed();            
        }
    }//GEN-LAST:event_txtLineTotalKeyPressed
    
    private void removeButtonActionPerformed(){
        DefaultTableModel model = (DefaultTableModel)tableSales.getModel();
        model.removeRow(tableSales.getSelectedRow());        
        float sum = 0;
        for (int i=0; i<tableSales.getRowCount(); i++){
            sum = sum + Float.parseFloat(tableSales.getValueAt(i, 4).toString());
        }
        txtTotal.setText(Float.toString(sum));
    }
    
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        removeButtonActionPerformed();
    }//GEN-LAST:event_removeButtonActionPerformed
    
    public void Print(){
        String Total = txtTotal.getText(), Pay = txtPay.getText(), Balance = txtBalance.getText();        
        new Print(Total, Pay, Balance, tableSales.getModel()).setVisible(true);        
    }
    
    private void invoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceButtonActionPerformed
        float Total = Float.parseFloat(txtTotal.getText());        
        float Pay = Float.parseFloat(txtPay.getText());
        DecimalFormat Formatter = new DecimalFormat("##.00");  // Decimal Formatter
        String Balance = Formatter.format(Pay - Total); 
        txtBalance.setText(String.valueOf(Balance));        
        saleUpdate();
        Print();
    }//GEN-LAST:event_invoiceButtonActionPerformed

    private void userStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userStatusActionPerformed
    
    private void deleteButtonUserActionPerformed(){
        DefaultTableModel model = (DefaultTableModel)tableUsers.getModel();
        int SelectIndex = tableUsers.getSelectedRow();        
        int ID = Integer.parseInt(model.getValueAt(SelectIndex, 0).toString());
        String Username = model.getValueAt(SelectIndex, 1).toString(); 
        int AdminOccurrence = 0;
        
        for(int row = 0; row < model.getRowCount(); row++) {                    
            if (tableUsers.getValueAt(row, 3).equals("admin") )
                AdminOccurrence++;                    
        }
        if(AdminOccurrence == 1 && userType.getSelectedItem().toString().equals("admin")){
            JOptionPane.showMessageDialog(this, "At least one 'admin' type account is required!");          
        }
        else{        
            int Choice = JOptionPane.showConfirmDialog(this, "Delete?","Warning", JOptionPane.YES_NO_OPTION);
            if(Choice == JOptionPane.YES_OPTION){
                try{
                    con = DriverManager.getConnection(URL,USER,PASS);
                    String sql = "DELETE FROM users WHERE ID=?";
                    pstmt = con.prepareStatement(sql);
                    pstmt.setInt(1, ID);
                    pstmt.executeUpdate();
                    JOptionPane.showMessageDialog(this, "User Deleted");
                    UserUpdate();
                    txtUsername.setText("");
                    userStatus.setSelectedIndex(-1);
                    txtUsername.requestFocus();
                }catch(SQLException e){
                    JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
                }finally {
                    try {
                        if (con != null) {
                            con.close();
                        }
                        if (pstmt != null) {
                            pstmt.close();
                        }if (rs != null) {
                        rs.close();
                        }
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
                    }
                }    
            }
        }
    }
    
    private void deleteButtonUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonUserActionPerformed
        // TODO add your handling code here:
        deleteButtonUserActionPerformed();
    }//GEN-LAST:event_deleteButtonUserActionPerformed

    private void editButtonUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonUserActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tableUsers.getModel();
        int SelectIndex = tableUsers.getSelectedRow();        
        int ID = Integer.parseInt(model.getValueAt(SelectIndex, 0).toString());
        String Username = txtUsername.getText();
        String Type = userType.getSelectedItem().toString();
        String Password;
        int AdminOccurrence = 0;
        String checkName = "";
        for(int row = 0; row < model.getRowCount(); row++) {                    
            if (tableUsers.getValueAt(row, 3).equals("admin")){
                AdminOccurrence++;
                checkName = tableUsers.getValueAt(row, 1).toString();
            }    
        }
        Password = txtPassword.getText();           
        String Status = userStatus.getSelectedItem().toString();            
        try{
            con = DriverManager.getConnection(URL,USER,PASS);
            String sql = "UPDATE users SET username=?, password=?, status=?, type=? WHERE ID=?";
            pstmt = con.prepareStatement(sql);
            pstmt.setString(1, Username);
            if("".equals(Password))
                JOptionPane.showMessageDialog(this, "Password Cannot be Empty");
            else
                pstmt.setString(2, Password);
            pstmt.setString(3, Status);

            if(AdminOccurrence == 1 && checkName.equals(Username)){
                JOptionPane.showMessageDialog(this, "User Credentials Updated except its Type");
            }    
            else
                pstmt.setString(4, Type);

            pstmt.setInt(5, ID);
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "User Credentials Updated");                
            UserUpdate();
            txtUsername.setText("");
            txtPassword.setText("");
            userType.setSelectedIndex(-1);
            userStatus.setSelectedIndex(-1);
            txtUsername.requestFocus();                        
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, "Please check the credentials you have entered");
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                rs.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        }           
    }//GEN-LAST:event_editButtonUserActionPerformed
    
    
    
    private void UserUpdate(){        
        try{
            int ColumnCount;
            con = DriverManager.getConnection(URL,USER,PASS);
            String sql = "SELECT * FROM users";
            pstmt = con.prepareStatement(sql);
            rs = pstmt.executeQuery();
            rsmd = rs.getMetaData();            
            ColumnCount = rsmd.getColumnCount();            
            DefaultTableModel model = (DefaultTableModel)tableUsers.getModel();
            model.setRowCount(0);            
            while(rs.next()){
                model.addRow(new Object[]{
                    rs.getString("ID"),
                    rs.getString("username"),                    
                    rs.getString("status"),
                    rs.getString("type")
                } );
            }            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        }            
    }
    
    private void addButtonUserActionPerformed(){
        String Username = txtUsername.getText();
        String Password = txtPassword.getText();
        String Status = userStatus.getSelectedItem().toString(); 
        String Type = userType.getSelectedItem().toString();
        try{
            con = DriverManager.getConnection(URL,USER,PASS);
            String sql = "INSERT INTO users(username, password, type, status) VALUES (?,?,?,?)";
            pstmt = con.prepareStatement(sql);
            pstmt.setString(1, Username);
            pstmt.setString(2, Password);
            pstmt.setString(3, Type);
            pstmt.setString(4, Status);            
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "User Added");            
            UserUpdate();
            txtUsername.setText("");
            txtPassword.setText("");
            userStatus.setSelectedIndex(-1);            
            txtUsername.requestFocus();            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                    rs.close();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        }    
    }
    
    private void addButtonUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonUserActionPerformed
        // TODO add your handling code here:
        addButtonUserActionPerformed();
    }//GEN-LAST:event_addButtonUserActionPerformed

    private void tableUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableUsersMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)tableUsers.getModel();
        int SelectIndex = tableUsers.getSelectedRow();
        txtUsername.setText(model.getValueAt(SelectIndex, 1).toString());        
        userStatus.setSelectedItem(model.getValueAt(SelectIndex, 2).toString());
        userType.getModel().setSelectedItem(model.getValueAt(SelectIndex, 3).toString());        
    }//GEN-LAST:event_tableUsersMouseClicked

    private void txtMRPSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMRPSalesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMRPSalesActionPerformed

    private void userMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userMouseClicked
        // TODO add your handling code here:
        Login login = new Login();
        this.dispose();
        login.setVisible(true);        
    }//GEN-LAST:event_userMouseClicked

    private void spinQtyPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_spinQtyPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_spinQtyPropertyChange

    private void exitCatalogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitCatalogMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitCatalogMouseClicked

    private void exitSalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitSalesMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitSalesMouseClicked

    private void exitCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitCategoryMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitCategoryMouseClicked

    private void exitUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitUserMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitUserMouseClicked

    private void txtProductKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProductKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductKeyReleased

    private void txtProductSalesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProductSalesKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String PName = txtProductSales.getText();
            try{
                con = DriverManager.getConnection(URL, USER, PASS);
                String sql = "SELECT * FROM catalogtable WHERE prodname = ?";
                pstmt = con.prepareStatement(sql);
                pstmt.setString(1, PName);
                rs = pstmt.executeQuery();
                if (rs.next()==false){
                    JOptionPane.showMessageDialog(this, "Product Not Found");
                }else{
                    String Code = rs.getString("prodcode");
                    String MRP = rs.getString("MRP");
                    txtCodeSales.setText(Code.trim());
                    txtMRPSales.setText(MRP.trim());
                    AvailableQty = rs.getInt("qty");
                }
            }
            catch(SQLException e){
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }finally {
                try {
                    if (con != null) {
                        con.close();
                    }
                    if (pstmt != null) {
                        pstmt.close();
                    }if (rs != null) {
                        rs.close();
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_txtProductSalesKeyPressed

    private void txtProductSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductSalesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductSalesActionPerformed

    private void txtPayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPayKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            float Total = Float.parseFloat(txtTotal.getText());        
            float Pay = Float.parseFloat(txtPay.getText());
            DecimalFormat Formatter = new DecimalFormat("##.00");  // Decimal Formatter
            String Balance = Formatter.format(Pay - Total); 
            txtBalance.setText(Balance);
            saleUpdate();
            Print();
        }    
    }//GEN-LAST:event_txtPayKeyPressed

    private void tableSalesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableSalesKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_DELETE){
            removeButtonActionPerformed();            
        }
    }//GEN-LAST:event_tableSalesKeyPressed

    private void tableCatalogKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableCatalogKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_DELETE){
            deleteButtonCatalogActionPerformed();
        }
    }//GEN-LAST:event_tableCatalogKeyPressed

    private void txtCatNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCatNameKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_DELETE){
            addButtonCatActionPerformed();
        }
    }//GEN-LAST:event_txtCatNameKeyPressed

    private void txtPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            addButtonUserActionPerformed();
        }
    }//GEN-LAST:event_txtPasswordKeyPressed

    private void tableUsersKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableUsersKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_DELETE){
            deleteButtonUserActionPerformed();
        }
    }//GEN-LAST:event_tableUsersKeyPressed

    private void txtDiscountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            int Quantity =  Integer.parseInt(spinQty.getValue().toString());
            float MRP = Float.parseFloat(txtMRPSales.getText());
            String PName = txtProductSales.getText();
            if(!"".equals(txtDiscount.getText())){
                int Discount = Integer.parseInt(txtDiscount.getText());
                MRP = MRP - (Discount*MRP)/100;
                MRPSales.setText("Price");
            }
            DecimalFormat Formatter = new DecimalFormat("##.00");  // Decimal Formatter
            String LineTotal = Formatter.format(Quantity * MRP);
            txtLineTotal.setText(String.valueOf(LineTotal));
            txtLineTotal.requestFocus();
        }
    }//GEN-LAST:event_txtDiscountKeyPressed

    private void spinQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spinQtyKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            qtyChanged();
        }
    }//GEN-LAST:event_spinQtyKeyPressed

    private void printSRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printSRActionPerformed
        // TODO add your handling code here:        
        try{
            con = DriverManager.getConnection(URL, USER, PASS);
            String sql = "SELECT * FROM salestable";
            pstmt = con.prepareStatement(sql);                         
            rs = pstmt.executeQuery(sql);
            rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();
            txtReport.setText("Sale ID\t\tDate\t\t\tTotal\t\tPaid\t\tBalance\t\tUser\n\n");
            
            while(rs.next()) {                
                for(int i=1; i<=columnCount; i++){
                    txtReport.setText(txtReport.getText() + rs.getString(i)+"\t\t");
                    if(i == 6)
                        txtReport.setText(txtReport.getText() + "\n");
                }
            }            
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                    rs.close();
                }
            }catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        }        
    }//GEN-LAST:event_printSRActionPerformed

    private void printIndPSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printIndPSActionPerformed
        // TODO add your handling code here:
          try{
            con = DriverManager.getConnection(URL, USER, PASS);
            String sql = "SELECT * FROM productsold";
            pstmt = con.prepareStatement(sql);                         
            rs = pstmt.executeQuery(sql);
            rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();
            txtReport.setText("#\t\tSale ID\t\tCode\t\tMRP\t\tTotal\t\tQty\t\tDiscount\n\n");
            
            while(rs.next()) {                
                for(int i=1; i<=columnCount; i++){
                    txtReport.setText(txtReport.getText() + rs.getString(i)+"\t\t");
                    if(i == 7)
                        txtReport.setText(txtReport.getText() + "\n");
                }
            }            
        }
        catch(SQLException e){
            JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            try {
                if (con != null) {
                    con.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }if (rs != null) {
                    rs.close();
                }
            }catch (SQLException e) {
                JOptionPane.showMessageDialog(this, e, "SQL Error", JOptionPane.ERROR_MESSAGE);
            }
        } 
    }//GEN-LAST:event_printIndPSActionPerformed

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jLabel13MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            int Index = txtReport.getText().indexOf("\n");
            if(Index > 42){
                txtReport.setFont(new Font("Monospaced", Font.PLAIN, 7));
            }else{
                txtReport.setFont(new Font("Monospaced", Font.PLAIN, 8)); 
            }
            txtReport.print();
            txtReport.setFont(new Font("Monospaced", Font.PLAIN, 13));
        }catch (PrinterException ex) {
            Logger.getLogger(MainPOS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
     /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPOS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainPOS().setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel MRPSales;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addButtonCat;
    private javax.swing.JButton addButtonCatalog;
    private javax.swing.JButton addButtonUser;
    private javax.swing.JComboBox<String> catStatus;
    private javax.swing.JButton deleteButtonCat;
    private javax.swing.JButton deleteButtonCatalog;
    private javax.swing.JButton deleteButtonUser;
    private javax.swing.JButton editButtonCat;
    private javax.swing.JButton editButtonCatalog;
    private javax.swing.JButton editButtonUser;
    private javax.swing.JLabel exitCatalog;
    private javax.swing.JLabel exitCategory;
    private javax.swing.JLabel exitSales;
    private javax.swing.JLabel exitUser;
    private javax.swing.JButton invoiceButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelCatalog;
    private javax.swing.JLabel labelCategoryList;
    private javax.swing.JLabel labelCategoryName;
    private javax.swing.JLabel labelCategoryStatus;
    private javax.swing.JComboBox logCategory;
    private javax.swing.JComboBox<String> logStatus;
    private javax.swing.JButton printIndPS;
    private javax.swing.JButton printSR;
    private javax.swing.JButton removeButton;
    private javax.swing.JSpinner spinQty;
    private javax.swing.JTable tableCatalog;
    private javax.swing.JTable tableCategory;
    private javax.swing.JTable tableSales;
    private javax.swing.JTable tableUsers;
    private javax.swing.JTextField txtBalance;
    private javax.swing.JTextField txtCP;
    private javax.swing.JTextField txtCatName;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtCodeSales;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtDiscount;
    private javax.swing.JTextField txtLineTotal;
    private javax.swing.JTextField txtMRP;
    private javax.swing.JTextField txtMRPSales;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtPay;
    private javax.swing.JTextField txtProduct;
    private javax.swing.JTextField txtProductSales;
    private javax.swing.JTextField txtQty;
    private javax.swing.JTextArea txtReport;
    private javax.swing.JTextField txtTax;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JLabel user;
    private javax.swing.JComboBox<String> userStatus;
    private javax.swing.JComboBox<String> userType;
    // End of variables declaration//GEN-END:variables
}
